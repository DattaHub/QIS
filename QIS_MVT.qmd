---
title: "QIS for Multivariate t"
author: "Jyotishka Datta"
format: html
---

```{r setup, warning = F, message = F}
rm(list = ls())
# Set global R options
options(scipen = 4)

# Set the graphical theme
ggplot2::theme_set(ggplot2::theme_light())

# Set global knitr chunk options
knitr::opts_chunk$set(
  warning = FALSE, 
  message = FALSE,
  cache = TRUE
)

set.seed(123)

library(truncnorm)
library(pracma)
library(ggplot2)
```

## Multivariate $t$ Example 


## Estimation by QIS, and Naive MC 

We define three essential functions below: 

-  `vertical.grid` will generate an $x$-grid for integration using either the exponential weights (for original nested sampling), or uniform for Yakowitz (Quantile Importance Sampling. )
-  `sQ` is simply a sample quantile calculator. 


```{r basicfuns}
# Generate grid
vertical.grid = function(l,N,type = NULL){
  # "u" - uniform
  # "e" - exponential
  
  if(type == "u"){
    ugrid = runif(N)
    res = c(sort(ugrid),1)
    # res = sort(runif(N))
  }else if(type == "e"){
    res = exp(-(0:l)/N)
  }
  
  return(res)
}
# Quantile
sQ = function(q,Y){
  # q-quantile of Y
  N = length(Y)
  res = Y[ceiling(N*q)]
  return(res)
}
```


### Naive Monte Carlo 

```{r naive, cache = T}
# Test example
# Prior and Likelihood

set.seed(123)

d = 50
tau = 1
nu = 2

trueZ <- 1.9445572*10^(-29) ## U(26,2,1), d = 50, nu = 2, s = 1

dtmvr <- function(x, nu){
  d = length(x)
  logden = -0.5*(nu + d)*log(1 + (t(x)%*%x)/nu)
  return(exp(logden))
}

library(LaplacesDemon)

# dtmvr <- function(x, nu){
#   d = length(x)
#   mu = rep(0,d)
#   S = diag(d)
#   return(exp(dmvt(x, mu, S, df=nu, log=T)))
# }

r = 200
# d = 50

mc.naive = NULL
verbose = TRUE
for(i in 1:r){
  if(isTRUE(verbose) && i %% 10 == 0)
    cat("Iteration ",i, "\n")
  M = 10000
  # X = rmvn(M, rep(0,d), eye(d))
  Y = numeric(M)
  for(j in 1:M){
    Y[j] = dtmvr(x = rnorm(d, 0, 1), nu = 2)
  }
  mc.naive = c(mc.naive,mean(Y))
}

mean(mc.naive)

hist(mc.naive, breaks = 30, main = "Naive Monte Carlo Estimates")
abline(v=trueZ,col="red",lwd=2)
```


### Quantile Importance Sampling 

```{r qis, cache = T}
set.seed(123)

## QIS 

N = 60
r = 200

mc.qis = NULL
verbose = TRUE

simu.grid.unif = vertical.grid(l=NULL,N,type = "u")

for(i in 1:r){
  
  if(isTRUE(verbose) && i %% 10 == 0)
    cat("Iteration ",i, "\n")
  M = 10000
  # X = rmvn(M,rep(0,d), eye(d))
  Y = numeric(M)
  for(j in 1:M){
    Y[j] = dtmvr(x = rnorm(d, 0, 1), nu = 2)
  }
  Y = sort(Y)
  Lambda = sQ(simu.grid.unif,Y)
  
  x = simu.grid.unif
  y = Lambda
  # Use a correction term at the boundary: -h^2/12*(f'(b)-f'(a))
  # h  <- x[2] - x[1]
  # ca <- (y[2]-y[1]) / h
  # cb <- (y[N]-y[N-1]) / h
  # YakoMC <- trapz(x, y) - h^2/12 * (cb - ca)
  YakoMC <- trapz(x, y)
  
  # mc.qis = c(mc.qis, trapz(simu.grid.unif,Lambda)) ## QIS Original 
  mc.qis = c(mc.qis, YakoMC) ## QIS Corrected
}

cbind(mean(mc.qis), mean(mc.naive), trueZ)
```

### Comparison 

#### Graphically, ... 

```{r graphics, cache = F}
library(ggplot2)
mc.data = rbind(data.frame(MC = mc.qis, method = "QIS"),
                data.frame(MC = mc.naive, method = "Naive MC"))

(plt <- ggplot(mc.data, aes(MC, fill = method)) + 
    geom_histogram(alpha=0.75, bins = 30, position="identity",aes(y = after_stat(density)))+
    geom_density(alpha=0.75, stat="density",position="identity",aes(y = after_stat(density)))+
    expand_limits(x = c(1e-33,1e-25))+
        geom_vline(xintercept=trueZ)+scale_x_log10()+
    # coord_flip()+ 
    facet_wrap(vars(method), ncol = 1, scales = "free_y")+
    theme_minimal()+
    labs(title = "QIS vs. Naive MC", subtitle = "Multivariate t, MVN prior"))

# ggsave(paste0("~/R/Yakowitz/art/","qis_vs_naive_mvt",N,r,"d",d,".pdf"), plt, width = 9, height = 7, device = cairo_pdf)
# ggsave(paste0("~/R/Yakowitz/art/","qis_vs_naive_mvt",N,r,"d",d,".eps"), plt, width = 9, height = 7, device = cairo_pdf)
# ggsave(paste0("~/R/Yakowitz/art/","qis_vs_naive_mvt",N,r,"d",d,".png"), plt, width = 9, height = 7)

```


#### Numerically, ...

```{r rmse, cache = F}
mean.qis <- mean(mc.qis); mean.naive <- mean(mc.naive)
mape.qis <- median(abs((mc.qis)-(trueZ))/(trueZ))
mape.naive <- median(abs(((mc.naive)-(trueZ))/(trueZ)))
rmse.qis <- sqrt((mean((mc.qis)-(trueZ))^2))
rmse.naive <- sqrt((mean((mc.naive)-(trueZ))^2))

perf <- rbind((cbind(mean.qis,mean.naive)),
              (cbind(mape.qis, mape.naive)),
              (cbind(rmse.qis,rmse.naive)))

colnames(perf) <- c("QIS", "Naive"); row.names(perf) <- c("Mean", "MAPE", "RMSE")
perf
```

